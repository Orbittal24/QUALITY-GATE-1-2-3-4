import React, { useState, useEffect } from 'react';
import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Alert, Table, Button } from 'reactstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import axios from 'axios';
import Swal from 'sweetalert2';
import { useRouter } from 'next/navigation';
import withReactContent from 'sweetalert2-react-content';

const MySwal = withReactContent(Swal);

// Define the type for the checklist data
type ChecklistItem = {
  Sr_No: number;
  ProsubBarcode: string;
  PackName: string;
  CheckedBy: string;
  DateTime: string;
  Status?: string;
  [key: string]: string | { OK: boolean; 'Not OK': boolean } | number | undefined;
};

const TableThree: React.FC = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [packName, setPackName] = useState<string>('');
  const [prosubBarcode, setProsubBarcode] = useState<string>('');
  const [checkedBy, setCheckedBy] = useState<string>('');
  const [tableNames, setTableNames] = useState<string[]>([]);
  const [alertMessage, setAlertMessage] = useState<string | null>(null);
  const [checklistData, setChecklistData] = useState<ChecklistItem[]>([]);
  const [selectedTableName, setSelectedTableName] = useState<string>('');
  const [rangeCells, setRangeCells] = useState<{ [key: string]: { min: number, max: number } }>({});
  const [adminCells, setAdminCells] = useState<{ [key: string]: boolean }>({});

  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem('auth');
    if (!token) {
      router.push('/');
    }
  }, []);

  useEffect(() => {
    const fetchTableNames = async () => {
      try {
        const response = await axios.get(`/api/adminchecklist?packName=${packName}`);
        setTableNames(response.data.tableNames);
        setProsubBarcode(response.data.prosubBarcode); // Set the prosubBarcode from the response
        setDropdownOpen(true); // Open the dropdown when results are fetched
      } catch (error) {
        console.error('Error fetching table names:', error);
        setAlertMessage('Error fetching table names');
      }
    };

    if (packName) {
      fetchTableNames();
    } else {
      setDropdownOpen(false); // Close the dropdown if the pack name system
    }
  }, [packName]);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPackName(event.target.value);
  };

  const handleSelectTableName = async (tableName: string) => {
    try {
      const response = await axios.get(`/api/adminchecklist?tableName=${tableName}`);
      const data = response.data.tableData;
      if (data.length > 0) {
        const newRangeCells: { [key: string]: { min: number, max: number } } = {};
        const newAdminCells: { [key: string]: boolean } = {};
        const updatedData = data.map((row: ChecklistItem, rowIndex: number) => {
          const updatedRow = { ...row };

          // Update range cells and checkbox cells
          Object.entries(updatedRow).forEach(([key, value]) => {
            if (typeof value === 'string') {
              if (value.startsWith('Range:')) {
                const match = value.match(/Range: (\d+)-(\d+)/);
                if (match) {
                  newRangeCells[`${rowIndex}-${key}`] = { min: parseInt(match[1], 10), max: parseInt(match[2], 10) };
                  updatedRow[key] = ''; // Clear the cell value for display
                  newAdminCells[`${rowIndex}-${key}`] = true;
                }
              } else if (value === '[object Object]' || value === 'Checkbox: OK, Not OK') {
                updatedRow[key] = { OK: false, 'Not OK': false };
                newAdminCells[`${rowIndex}-${key}`] = true;
              } else if (value !== '') {
                newAdminCells[`${rowIndex}-${key}`] = true; // Mark non-empty cells as admin-defined
              }
            }
          });

          return updatedRow;
        });

        // Clear user input cells
        const clearedData = updatedData.map((row: ChecklistItem, rowIndex: number) => {
          const clearedRow = { ...row };
          Object.keys(clearedRow).forEach(key => {
            if (!newAdminCells[`${rowIndex}-${key}`] && !newRangeCells[`${rowIndex}-${key}`]) {
              clearedRow[key] = '';
            }
          });
          return clearedRow;
        });

        setChecklistData(clearedData);
        setCheckedBy(data[0].CheckedBy || '');
        setSelectedTableName(tableName);
        setDropdownOpen(false);
        setRangeCells(newRangeCells);
        setAdminCells(newAdminCells);
      }
    } catch (error) {
      console.error('Error fetching checklist data:', error);
      setAlertMessage('Error fetching checklist data');
    }
  };

  const toggleDropdown = () => setDropdownOpen(prevState => !prevState);

  const handleCellChange = (rowIndex: number, key: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    const updatedData = [...checklistData];
    updatedData[rowIndex][key] = value;

    // Update Status column
    const rangeCell = rangeCells[`${rowIndex}-${key}`];
    if (rangeCell) {
      updatedData[rowIndex]['Status'] = (Number(value) >= rangeCell.min && Number(value) <= rangeCell.max) ? 'OK' : 'Not OK';
    }

    setChecklistData(updatedData);
  };

  const handleCheckedByChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCheckedBy(event.target.value);
    const updatedData = checklistData.map((row) => ({ ...row, CheckedBy: event.target.value }));
    setChecklistData(updatedData);
  };

  const handleCheckboxChange = (rowIndex: number, key: string, checkboxKey: 'OK' | 'Not OK') => {
    const updatedData = [...checklistData];
    updatedData[rowIndex][key] = checkboxKey === "OK" ? { OK: true, 'Not OK': false } : { OK: false, 'Not OK': true };

    // Update Status column
    updatedData[rowIndex]['Status'] = checkboxKey;

    setChecklistData(updatedData);
  };

  const handleSubmit = async () => {
    try {
      const response = await axios.post('/api/usechecklist', {
        tableName: selectedTableName,
        tableData: checklistData,
      });
      if (response.status === 200) {
        setAlertMessage('Data updated successfully');
        // Show success alert
        MySwal.fire({
          title: 'Success',
          text: 'Data updated successfully',
          icon: 'success',
          customClass: {
            confirmButton: 'swal2-confirm-button'
          }
        });
        // Clear user input cells after submit
        const clearedData = checklistData.map((row, rowIndex) => {
          const clearedRow = { ...row };
          Object.keys(clearedRow).forEach(key => {
            if (!adminCells[`${rowIndex}-${key}`] && !rangeCells[`${rowIndex}-${key}`]) {
              clearedRow[key] = '';
            }
          });
          return clearedRow;
        });
        setChecklistData(clearedData);
      } else {
        setAlertMessage('Error updating data');
        // Show error alert
        MySwal.fire({
          title: 'Error',
          text: 'Error updating data',
          icon: 'error',
          customClass: {
            confirmButton: 'swal2-confirm-button'
          }
        });
      }
    } catch (error) {
      console.error('Error updating data:', error);
      setAlertMessage('Error updating data');
      // Show error alert
      MySwal.fire({
        title: 'Error',
        text: 'Error updating data',
        icon: 'error',
        customClass: {
          confirmButton: 'swal2-confirm-button'
        }
      });
    }
  };

  return (
    <div>
      {alertMessage && <Alert color="danger">{alertMessage}</Alert>}
      <Dropdown isOpen={dropdownOpen} toggle={toggleDropdown}>
        <DropdownToggle tag="div" className="w-100">
          <Input
            type="text"
            value={packName}
            onChange={handleInputChange}
            placeholder="Enter or scan pack name"
            className="mb-3"
          />
        </DropdownToggle>
        {tableNames.length > 0 && (
          <DropdownMenu style={{ width: '100%' }}>
            {tableNames.map((tableName, index) => (
              <DropdownItem key={index} onClick={() => handleSelectTableName(tableName)}>
                {tableName}
              </DropdownItem>
            ))}
          </DropdownMenu>
        )}
      </Dropdown>

      {selectedTableName && (
        <div className="mt-3">
          <h4>Checklist Data for {selectedTableName}</h4>
          <div className="mb-3">
            <Input
              type="text"
              value={prosubBarcode}
              readOnly
              placeholder="Prosub Barcode"
              className="mb-3"
            />
            <Input
              type="text"
              value={packName}
              readOnly
              placeholder="Pack Name"
              className="mb-3"
            />
            <Input
              type="text"
              value={checkedBy}
              onChange={handleCheckedByChange}
              placeholder="Checked By"
              className="mb-3"
            />
          </div>
          {checklistData.length > 0 ? (
            <Table bordered>
              <thead>
                <tr>
                  <th>Sr_No</th>
                  {Object.keys(checklistData[0]).filter(key => key !== 'ProsubBarcode' && key !== 'PackName' && key !== 'DateTime' && key !== 'CheckedBy' && key !== 'Sr_No' && key !== 'Status' && key !== 'PreviouslyUsedBy').map((key, index) => (
                    <th key={index}>{key}</th>
                  ))}
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {checklistData.map((row, rowIndex) => (
                  <tr key={rowIndex}>
                    <td>{rowIndex + 1}</td>
                    {Object.entries(row).filter(([key]) => key !== 'ProsubBarcode' && key !== 'PackName' && key !== 'DateTime' && key !== 'CheckedBy' && key !== 'Sr_No' && key !== 'Status' && key !== 'PreviouslyUsedBy').map(([key, value], colIndex) => (
                      <td key={colIndex}>
                        {typeof value === 'object' && value !== null && ('OK' in value || 'Not OK' in value) ? (
                          <div>
                            <Input
                              type="checkbox"
                              checked={(value as { OK: boolean; 'Not OK': boolean }).OK}
                              onChange={() => handleCheckboxChange(rowIndex, key, 'OK')}
                              readOnly={adminCells[`${rowIndex}-${key}`] && !rangeCells[`${rowIndex}-${key}`]} // Make admin-defined checkboxes read-only, except range cells
                            /> OK
                            <Input
                              type="checkbox"
                              checked={(value as { OK: boolean; 'Not OK': boolean })['Not OK']}
                              onChange={() => handleCheckboxChange(rowIndex, key, 'Not OK')}
                              readOnly={adminCells[`${rowIndex}-${key}`] && !rangeCells[`${rowIndex}-${key}`]} // Make admin-defined checkboxes read-only, except range cells
                            /> Not OK
                          </div>
                        ) : (
                          rangeCells[`${rowIndex}-${key}`] ? (
                            <Input
                              type="text"
                              value={String(value)}
                              onChange={(event) => handleCellChange(rowIndex, key, event)}
                              style={{
                                backgroundColor: value !== ''
                                  ? (Number(value) >= rangeCells[`${rowIndex}-${key}`].min && Number(value) <= rangeCells[`${rowIndex}-${key}`].max)
                                    ? 'green'
                                    : 'red'
                                  : 'white'
                              }}
                            />
                          ) : (
                            <Input
                              type="text"
                              value={String(value)}
                              onChange={(event) => handleCellChange(rowIndex, key, event)}
                              readOnly={adminCells[`${rowIndex}-${key}`]} // Make admin-defined cells read-only
                            />
                          )
                        )}
                      </td>
                    ))}
                    <td>{row.Status}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          ) : (
            <Alert color="warning">No data available for this checklist</Alert>
          )}
          <Button color="primary" onClick={handleSubmit} className="mt-3">Submit</Button>
        </div>
      )}
    </div>
  );
};

export default TableThree;
